/// wasmcp: WebAssembly-based Model Context Protocol implementation
///
/// This package provides composable MCP server and client components using the
/// WebAssembly Component Model. Components implement specific interfaces (handlers
/// or capabilities) and are composed into linear pipelines at build time.
///
/// Architecture:
/// - **Handlers**: Full protocol adapters (server-handler, client-handler)
/// - **Capabilities**: Focused business logic (tools-capability, prompts-capability)
/// - **Middleware**: Automatic wrapping of capabilities into handlers
/// - **Transports**: Entry points that route to handlers (HTTP, stdio)
///
/// <https://modelcontextprotocol.io>
package wasmcp:mcp@0.4.0;

/// Model Context Protocol (MCP) core types and messages
///
/// This interface defines all MCP protocol types, including:
/// - JSON-RPC message structures (requests, responses, notifications, errors)
/// - Content types (text, images, audio, resources)
/// - Server capabilities (tools, prompts, resources)
/// - Client capabilities (sampling, roots, elicitation)
/// - Session and context management
///
/// These types form the foundation for MCP communication between clients and servers.
/// They are used by both handler interfaces and capability interfaces.
///
/// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18>
@since(version = 0.4.0)
interface protocol {
  use wasi:io/streams@0.2.3.{input-stream, output-stream};

  /// =========================================================================
  /// Core Type Aliases
  /// =========================================================================
  /// Cryptographic hash value (typically SHA-256)
  @since(version = 0.4.0)
  type hash = list<u8>;

  /// Opaque pagination cursor for list operations
  ///
  /// Cursors are returned by list operations (tools/list, resources/list, etc.)
  /// and can be passed back to retrieve the next page of results.
  @since(version = 0.4.0)
  type cursor = string;

  /// JSON-encoded data as a string
  ///
  /// Many MCP fields accept arbitrary JSON for extensibility. This type
  /// represents JSON as a string that should be parsed by the component.
  @since(version = 0.4.0)
  type json = string;

  /// Metadata field (JSON-encoded)
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
  @since(version = 0.4.0)
  type meta = json;

  /// Uniform Resource Identifier
  ///
  /// Used for identifying resources, templates, and roots in MCP.
  @since(version = 0.4.0)
  type uri = string;

  /// Session identifier (cryptographic hash)
  ///
  /// Uniquely identifies an MCP session across multiple HTTP requests.
  /// Transmitted in the Mcp-Session-Id header.
  @since(version = 0.4.0)
  type session-id = hash;

  /// Identity claims (JSON-encoded)
  ///
  /// Contains authentication and authorization information about the client.
  /// Format and validation are implementation-specific.
  @since(version = 0.4.0)
  type claims = json;

  /// =========================================================================
  /// Streaming Data Types
  /// =========================================================================
  /// Text data that can be provided as a string or stream
  ///
  /// Streaming text is useful for large content that shouldn't be
  /// buffered entirely in memory.
  @since(version = 0.4.0)
  variant text-data {
    /// Inline text content
    text(string),
    /// Streamed text content
    text-stream(input-stream),
  }

  /// Binary data that can be provided as bytes or stream
  ///
  /// Streaming blobs is useful for large binary content (images, audio, etc.)
  /// that shouldn't be buffered entirely in memory.
  @since(version = 0.4.0)
  variant blob-data {
    /// Inline binary content
    blob(list<u8>),
    /// Streamed binary content
    blob-stream(input-stream),
  }

  /// =========================================================================
  /// Content Types and Options
  /// =========================================================================
  /// Options for embedded resources
  @since(version = 0.4.0)
  record embedded-resource-options {
    mime-type: option<string>,
    meta: option<meta>,
  }

  /// Text resource contents
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#textresourcecontents>
  @since(version = 0.4.0)
  record text-resource-contents {
    uri: uri,
    text: text-data,
    options: option<embedded-resource-options>,
  }

  /// Binary resource contents
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#blobresourcecontents>
  @since(version = 0.4.0)
  record blob-resource-contents {
    uri: uri,
    blob: blob-data,
    options: option<embedded-resource-options>,
  }

  /// Resource contents (text or binary)
  @since(version = 0.4.0)
  variant resource-contents {
    text(text-resource-contents),
    blob(blob-resource-contents),
  }

  /// =========================================================================
  /// Protocol Enumerations
  /// =========================================================================
  /// Log severity levels
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/server/utilities/logging#log-levels>
  @since(version = 0.4.0)
  enum log-level {
    /// Detailed debugging information
    debug,
    /// General informational messages
    info,
    /// Normal but significant events
    notice,
    /// Warning conditions
    warning,
    /// Error conditions
    error,
    /// Critical conditions
    critical,
    /// Action must be taken immediately
    alert,
    /// System is unusable
    emergency,
  }

  /// Progress token for tracking long-running operations
  ///
  /// Progress tokens MUST be either a string or integer value.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-03-26/basic/utilities/progress#progress-flow>
  @since(version = 0.4.0)
  variant progress-token {
    %string(string),
    integer(s64),
  }

  /// JSON-RPC request identifier
  ///
  /// Request IDs can be either strings or numbers as per JSON-RPC 2.0.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#requestid>
  @since(version = 0.4.0)
  variant request-id {
    number(s64),
    %string(string),
  }

  /// MCP protocol version
  ///
  /// The protocol version determines which features and message types are available.
  @since(version = 0.4.0)
  enum protocol-version {
    /// Version 2025-06-18 (latest)
    v20250618,
    /// Version 2025-03-26
    v20250326,
    /// Version 2024-11-05
    v20241105,
  }

  /// Server capability list change flags
  ///
  /// Used in notifications to indicate which server lists have changed.
  @since(version = 0.4.0)
  flags server-lists {
    tools,
    resources,
    prompts,
  }

  /// Server subscription type flags
  ///
  /// Indicates which subscription types the server supports.
  @since(version = 0.4.0)
  flags server-subscriptions {
    resources,
  }

  /// Client capability list change flags
  ///
  /// Used in notifications to indicate which client lists have changed.
  @since(version = 0.4.0)
  flags client-lists {
    roots,
  }

  /// Role in a conversation
  ///
  /// Identifies whether a message is from the user or assistant.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#role>
  @since(version = 0.4.0)
  enum role {
    user,
    assistant,
  }

  /// =========================================================================
  /// Capability Structures
  /// =========================================================================
  /// Server capabilities advertised during initialization
  ///
  /// Indicates which optional features the server supports.
  @since(version = 0.4.0)
  record server-capabilities {
    /// Supports completion/complete requests
    completions: option<json>,
    /// Experimental capabilities (implementation-specific)
    experimental: option<list<tuple<string, json>>>,
    /// Supports logging/setLevel and notifications/message
    logging: option<json>,
    /// Supports list change notifications
    list-changed: option<server-lists>,
    /// Supports resource subscriptions
    subscriptions: option<server-subscriptions>,
  }

  /// Client capabilities advertised during initialization
  ///
  /// Indicates which optional features the client supports.
  @since(version = 0.4.0)
  record client-capabilities {
    /// Supports server-initiated elicitation requests
    elicitation: option<json>,
    /// Experimental capabilities (implementation-specific)
    experimental: option<list<tuple<string, json>>>,
    /// Supports list change notifications
    list-changed: option<client-lists>,
    /// Supports server-initiated sampling requests
    sampling: option<json>,
  }

  /// MCP implementation metadata
  ///
  /// Identifies the server or client implementation.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#implementation>
  @since(version = 0.4.0)
  record implementation {
    /// Implementation name (e.g., "wasmcp", "claude-desktop")
    name: string,
    /// Human-readable title
    title: option<string>,
    /// Semantic version string
    version: string,
  }

  /// =========================================================================
  /// Annotations
  /// =========================================================================
  /// Annotations that inform how clients use or display objects
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#annotations>
  @since(version = 0.4.0)
  record annotations {
    /// Intended audience for this content
    ///
    /// Can include multiple entries (e.g., ["user", "assistant"]).
    audience: option<list<role>>,
    /// Last modification timestamp (ISO 8601 format)
    ///
    /// Example: "2025-01-12T15:00:58Z"
    last-modified: option<string>,
    /// Importance priority (0.0 to 1.0)
    ///
    /// 1.0 = most important (effectively required)
    /// 0.0 = least important (entirely optional)
    priority: option<f64>,
  }

  /// Options for content blocks
  @since(version = 0.4.0)
  record content-options {
    /// Optional annotations for the client
    annotations: option<annotations>,
    /// Optional metadata
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
    meta: option<meta>,
  }

  /// Options for resource link content
  @since(version = 0.4.0)
  record resource-link-options {
    title: option<string>,
    description: option<string>,
    size: option<u64>,
    mime-type: option<string>,
    /// Optional annotations for the client
    annotations: option<annotations>,
    /// Optional metadata
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/basic/index#meta>
    meta: option<meta>,
  }

  /// A resource link included in a prompt or tool call result
  ///
  /// Resource links reference resources that the server can read. They may not
  /// appear in resources/list responses.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#resourcelink>
  @since(version = 0.4.0)
  record resource-link-content {
    /// The URI of this resource
    uri: uri,
    /// Resource name for programmatic or logical use
    name: string,
    options: option<resource-link-options>,
  }

  /// Binary content (image or audio) with MIME type
  ///
  /// Used for images and audio provided to or from an LLM.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#imagecontent>
  @since(version = 0.4.0)
  record blob {
    /// The binary data or stream
    data: blob-data,
    /// MIME type (e.g., "image/png", "audio/mp3")
    mime-type: string,
    options: option<content-options>,
  }

  /// Image content alias
  @since(version = 0.4.0)
  type image-content = blob;

  /// Audio content alias
  @since(version = 0.4.0)
  type audio-content = blob;

  /// Text content block
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#textcontent>
  @since(version = 0.4.0)
  record text-content {
    /// The text content of the message
    text: text-data,
    options: option<content-options>,
  }

  /// Embedded resource with content options
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#embeddedresource>
  @since(version = 0.4.0)
  record embedded-resource-content {
    %resource: resource-contents,
    options: option<content-options>,
  }

  /// Content blocks that can be included in messages
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#contentblock>
  @since(version = 0.4.0)
  variant content-block {
    text(text-content),
    image(image-content),
    audio(audio-content),
    resource-link(resource-link-content),
    embedded-resource(embedded-resource-content),
  }

  /// A message in a prompt with role and content
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#promptmessage>
  @since(version = 0.4.0)
  record prompt-message {
    content: content-block,
    role: role,
  }

  /// Tool-specific annotations
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations>
  @since(version = 0.4.0)
  record tool-annotations {
    /// Human-readable tool title
    title: option<string>,
    /// Hint that tool doesn't modify state
    read-only-hint: option<bool>,
    /// Hint that tool modifies or deletes data
    destructive-hint: option<bool>,
    /// Hint that tool can be called multiple times safely
    idempotent-hint: option<bool>,
    /// Hint that tool may produce non-deterministic results
    open-world-hint: option<bool>,
  }

  /// =========================================================================
  /// Tool Types
  /// =========================================================================
  /// Optional tool properties
  @since(version = 0.4.0)
  record tool-options {
    meta: option<meta>,
    annotations: option<tool-annotations>,
    description: option<string>,
    /// JSON Schema for tool output
    output-schema: option<json>,
    title: option<string>,
  }

  /// Pagination options for list results
  @since(version = 0.4.0)
  record next-cursor-options {
    meta: option<meta>,
    next-cursor: option<cursor>,
  }

  /// Tool definition
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#tool>
  @since(version = 0.4.0)
  record tool {
    /// Unique tool identifier
    name: string,
    /// JSON Schema describing tool parameters
    input-schema: json,
    options: option<tool-options>,
  }

  /// =========================================================================
  /// Resource Types
  /// =========================================================================
  /// Resource optional properties
  @since(version = 0.4.0)
  record resource-options {
    /// Resource size in bytes
    size: option<u64>,
    /// Human-readable title
    title: option<string>,
    /// Resource description
    description: option<string>,
    /// MIME type
    mime-type: option<string>,
    annotations: option<annotations>,
    meta: option<meta>,
  }

  /// Resource definition
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#resource>
  @since(version = 0.4.0)
  record mcp-resource {
    /// Resource URI
    uri: uri,
    /// Resource name for display/identification
    name: string,
    options: option<resource-options>,
  }

  /// Generic metadata options
  @since(version = 0.4.0)
  record meta-options {
    meta: option<meta>,
  }

  /// Resource template optional properties
  @since(version = 0.4.0)
  record resource-template-options {
    description: option<string>,
    title: option<string>,
    mime-type: option<string>,
    annotations: option<annotations>,
    meta: option<meta>,
  }

  /// Resource template with URI template pattern
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#resourcetemplate>
  @since(version = 0.4.0)
  record resource-template {
    /// URI template (RFC 6570)
    uri-template: string,
    /// Template name
    name: string,
    options: option<resource-template-options>,
  }

  /// =========================================================================
  /// Prompt Types
  /// =========================================================================
  /// Prompt argument definition
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#promptargument>
  @since(version = 0.4.0)
  record prompt-argument {
    /// Argument name
    name: string,
    /// Argument description
    description: option<string>,
    /// Whether argument is required
    required: option<bool>,
    /// Human-readable argument title
    title: option<string>,
  }

  /// Prompt optional properties
  @since(version = 0.4.0)
  record prompt-options {
    meta: option<meta>,
    /// Arguments this prompt accepts
    arguments: option<list<prompt-argument>>,
    /// Prompt description
    description: option<string>,
    /// Human-readable title
    title: option<string>,
  }

  /// Prompt definition
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#prompt>
  @since(version = 0.4.0)
  record prompt {
    /// Unique prompt identifier
    name: string,
    options: option<prompt-options>,
  }

  /// Generic description options
  @since(version = 0.4.0)
  record description-options {
    meta: option<meta>,
    description: option<string>,
  }

  /// =========================================================================
  /// Schema Types (for Elicitation)
  /// =========================================================================
  /// String schema format constraints
  @since(version = 0.4.0)
  enum string-schema-format {
    uri,
    email,
    date,
    date-time,
  }

  /// JSON Schema for string type
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#stringschema>
  @since(version = 0.4.0)
  record string-schema {
    description: option<string>,
    format: option<string-schema-format>,
    max-length: option<u32>,
    min-length: option<u32>,
    title: option<string>,
  }

  /// Number schema type
  @since(version = 0.4.0)
  enum number-schema-type {
    number,
    integer,
  }

  /// JSON Schema for number/integer type
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#numberschema>
  @since(version = 0.4.0)
  record number-schema {
    description: option<string>,
    maximum: option<f64>,
    minimum: option<f64>,
    title: option<string>,
    %type: number-schema-type,
  }

  /// JSON Schema for boolean type
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#booleanschema>
  @since(version = 0.4.0)
  record boolean-schema {
    default: option<bool>,
    description: option<string>,
    title: option<string>,
  }

  /// JSON Schema for enum type
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#enumschema>
  @since(version = 0.4.0)
  record enum-schema {
    description: option<string>,
    /// Allowed values
    %enum: list<string>,
    /// Human-readable names for enum values
    enum-names: option<list<string>>,
    title: option<string>,
  }

  /// Primitive schema types
  @since(version = 0.4.0)
  variant primitive-schema-definition {
    string-schema(string-schema),
    number-schema(number-schema),
    boolean-schema(boolean-schema),
    enum-schema(enum-schema),
  }

  /// Schema requested from client during elicitation
  @since(version = 0.4.0)
  record requested-schema {
    /// Properties to request from client
    properties: list<tuple<string, primitive-schema-definition>>,
    /// Required property names
    required: option<list<string>>,
  }

  /// Elicitation result action
  @since(version = 0.4.0)
  enum elicit-result-action {
    accept,
    decline,
    cancel,
  }

  /// Elicitation result content value
  @since(version = 0.4.0)
  variant elicit-result-content {
    %string(string),
    number(f64),
    boolean(bool),
  }

  /// =========================================================================
  /// Request/Response Types: Initialize
  /// =========================================================================
  /// Initialize request parameters
  ///
  /// Sent by client to begin an MCP session.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#initializerequest>
  @since(version = 0.4.0)
  record initialize-request {
    /// Client capabilities
    capabilities: client-capabilities,
    /// Client implementation info
    client-info: implementation,
    /// Protocol version client supports
    protocol-version: protocol-version,
  }

  /// Initialize result optional properties
  @since(version = 0.4.0)
  record initialize-result-options {
    /// Instructions for using the server
    instructions: option<string>,
    meta: option<meta>,
  }

  /// Initialize result structure
  ///
  /// Returned by server in response to initialize request.
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#initializeresult>
  @since(version = 0.4.0)
  record initialize-result {
    meta: option<meta>,
    /// Server implementation info
    server-info: implementation,
    /// Server capabilities
    capabilities: server-capabilities,
    /// Protocol version server will use
    protocol-version: protocol-version,
    options: option<initialize-result-options>,
  }

  /// =========================================================================
  /// Request/Response Types: Tools
  /// =========================================================================
  /// List tools request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listtoolsrequest>
  @since(version = 0.4.0)
  record list-tools-request {
    /// Pagination cursor (from previous response)
    cursor: option<cursor>,
  }

  /// List tools result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listtoolsresult>
  @since(version = 0.4.0)
  record list-tools-result {
    meta: option<meta>,
    /// Cursor for next page (if more results available)
    next-cursor: option<cursor>,
    /// Available tools
    tools: list<tool>,
  }

  /// Call tool request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#calltoolrequest>
  @since(version = 0.4.0)
  record call-tool-request {
    /// Tool name to invoke
    name: string,
    /// JSON-encoded tool arguments
    arguments: option<json>,
  }

  /// Call tool result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#calltoolresult>
  @since(version = 0.4.0)
  record call-tool-result {
    meta: option<meta>,
    /// Tool output content
    content: list<content-block>,
    /// Whether result represents an error
    is-error: option<bool>,
    /// Structured output (optional)
    structured-content: option<json>,
  }

  /// =========================================================================
  /// Request/Response Types: Resources
  /// =========================================================================
  /// List resources request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listresourcesrequest>
  @since(version = 0.4.0)
  record list-resources-request {
    /// Pagination cursor (from previous response)
    cursor: option<cursor>,
  }

  /// List resources result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listresourcesresult>
  @since(version = 0.4.0)
  record list-resources-result {
    meta: option<meta>,
    /// Cursor for next page (if more results available)
    next-cursor: option<cursor>,
    /// Available resources
    resources: list<mcp-resource>,
  }

  /// Read resource request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#readresourcerequest>
  @since(version = 0.4.0)
  record read-resource-request {
    /// Resource URI to read
    uri: uri,
  }

  /// Read resource result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#readresourceresult>
  @since(version = 0.4.0)
  record read-resource-result {
    meta: option<meta>,
    /// Resource contents (text or binary)
    contents: list<resource-contents>,
  }

  /// List resource templates request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listresourcetemplatesrequest>
  @since(version = 0.4.0)
  record list-resource-templates-request {
    /// Pagination cursor (from previous response)
    cursor: option<cursor>,
  }

  /// List resource templates result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listresourcetemplatesresult>
  @since(version = 0.4.0)
  record list-resource-templates-result {
    meta: option<meta>,
    /// Cursor for next page (if more results available)
    next-cursor: option<cursor>,
    /// Available resource templates
    resource-templates: list<resource-template>,
  }

  /// =========================================================================
  /// Request/Response Types: Prompts
  /// =========================================================================
  /// List prompts request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listpromptsrequest>
  @since(version = 0.4.0)
  record list-prompts-request {
    /// Pagination cursor (from previous response)
    cursor: option<cursor>,
  }

  /// List prompts result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listpromptsresult>
  @since(version = 0.4.0)
  record list-prompts-result {
    meta: option<meta>,
    /// Cursor for next page (if more results available)
    next-cursor: option<cursor>,
    /// Available prompts
    prompts: list<prompt>,
  }

  /// Get prompt request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#getpromptrequest>
  @since(version = 0.4.0)
  record get-prompt-request {
    /// Prompt name to retrieve
    name: string,
    /// JSON-encoded prompt arguments
    arguments: option<json>,
  }

  /// Get prompt result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#getpromptresult>
  @since(version = 0.4.0)
  record get-prompt-result {
    meta: option<meta>,
    /// Prompt description
    description: option<string>,
    /// Prompt messages
    messages: list<prompt-message>,
  }

  /// =========================================================================
  /// Request/Response Types: Completion
  /// =========================================================================
  /// Completion argument
  @since(version = 0.4.0)
  record completion-argument {
    /// Argument name
    name: string,
    /// Partial argument value
    value: string,
  }

  /// Completion context
  @since(version = 0.4.0)
  record completion-context {
    /// Additional arguments as JSON
    arguments: option<json>,
  }

  /// Prompt reference for completion
  @since(version = 0.4.0)
  record completion-prompt-reference {
    /// Prompt name
    name: string,
    /// Prompt title
    title: option<string>,
  }

  /// Reference types for completion
  @since(version = 0.4.0)
  variant completion-reference {
    /// Prompt reference
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#promptreference>
    prompt(completion-prompt-reference),
    /// Resource template reference
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#resourcetemplatereference>
    resource-template(uri),
  }

  /// Complete request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#completerequest>
  @since(version = 0.4.0)
  record complete-request {
    /// Argument to complete
    argument: completion-argument,
    /// Reference (prompt or resource template)
    ref: completion-reference,
    /// Additional context
    context: option<completion-context>,
  }

  /// Complete result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#completeresult>
  @since(version = 0.4.0)
  record complete-result {
    meta: option<meta>,
    /// Whether more results are available
    has-more: option<bool>,
    /// Total number of completions available
    total: option<u64>,
    /// Completion values
    values: list<string>,
  }

  /// =========================================================================
  /// Request/Response Types: Elicitation
  /// =========================================================================
  /// Elicit request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#elicitrequest>
  @since(version = 0.4.0)
  record elicit-request {
    /// Message to show client
    message: string,
    /// Schema describing requested information
    requested-schema: requested-schema,
  }

  /// Elicit result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#elicitresult>
  @since(version = 0.4.0)
  record elicit-result {
    meta: option<meta>,
    /// User action (accept, decline, cancel)
    action: elicit-result-action,
    /// User-provided values
    content: option<list<tuple<string, elicit-result-content>>>,
  }

  /// =========================================================================
  /// Request/Response Types: Roots
  /// =========================================================================
  /// List roots request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listrootsrequest>
  @since(version = 0.4.0)
  record list-roots-request {
    meta: option<meta>,
    /// Progress token for tracking
    progress-token: option<progress-token>,
  }

  /// Root directory or file
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#root>
  @since(version = 0.4.0)
  record root {
    meta: option<meta>,
    /// Root name
    name: option<string>,
    /// Root URI
    uri: uri,
  }

  /// List roots result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#listrootsresult>
  @since(version = 0.4.0)
  record list-roots-result {
    meta: option<meta>,
    /// Client root directories/files
    roots: list<root>,
  }

  /// =========================================================================
  /// Request/Response Types: Ping
  /// =========================================================================
  /// Ping request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#pingrequest>
  @since(version = 0.4.0)
  record ping-request {
    meta: option<meta>,
    /// Progress token for tracking
    progress-token: option<progress-token>,
    /// Additional data
    extras: list<tuple<string, json>>,
  }

  /// =========================================================================
  /// Request/Response Types: Sampling
  /// =========================================================================
  /// Context inclusion for sampling
  @since(version = 0.4.0)
  enum include-context {
    /// No context
    none,
    /// Include this server's context
    this-server,
    /// Include all servers' context
    all-servers,
  }

  /// Sampling content type
  @since(version = 0.4.0)
  enum sampling-content {
    text-content,
    image-content,
    audio-content,
  }

  /// Message for sampling request
  @since(version = 0.4.0)
  record sampling-message {
    /// Message content type
    content: sampling-content,
    /// Message role
    role: role,
  }

  /// Model hint for sampling
  @since(version = 0.4.0)
  record model-hint {
    /// Model name
    name: option<string>,
    /// Additional model parameters
    extra: option<json>,
  }

  /// Model preferences for sampling
  @since(version = 0.4.0)
  record model-preferences {
    /// Cost priority (0.0-1.0)
    cost-priority: option<f64>,
    /// Model hints
    hints: option<list<model-hint>>,
    /// Intelligence priority (0.0-1.0)
    intelligence-priority: option<f64>,
    /// Speed priority (0.0-1.0)
    speed-priority: option<f64>,
  }

  /// Sampling create message request
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#createmessagerequest>
  @since(version = 0.4.0)
  record sampling-create-message-request {
    /// Context to include
    include-context: include-context,
    /// Maximum tokens to generate
    max-tokens: u64,
    /// Conversation messages
    messages: list<sampling-message>,
    /// Request metadata
    metadata: option<json>,
    /// Model preferences
    model-preferences: option<model-preferences>,
    /// Stop sequences
    stop-sequences: option<list<string>>,
    /// System prompt
    system-prompt: option<string>,
    /// Sampling temperature
    temperature: option<f64>,
  }

  /// Sampling create message result
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#createmessageresult>
  @since(version = 0.4.0)
  record sampling-create-message-result {
    meta: option<meta>,
    /// Generated content
    content: sampling-content,
    /// Model used
    model: string,
    /// Response role
    role: role,
    /// Stop reason (e.g., "stop_sequence", "max_tokens")
    stop-reason: option<string>,
    /// Additional data
    extra: option<json>,
  }

  /// =========================================================================
  /// Request/Response Variants
  /// =========================================================================
  /// Client requests (sent to server)
  @since(version = 0.4.0)
  variant client-request {
    initialize(initialize-request),
    tools-list(list-tools-request),
    tools-call(call-tool-request),
    resources-list(list-resources-request),
    resources-read(read-resource-request),
    resources-templates-list(list-resource-templates-request),
    prompts-list(list-prompts-request),
    prompts-get(get-prompt-request),
    completion-complete(complete-request),
    logging-set-level(log-level),
    ping(ping-request),
    /// Subscribe to resource updates
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#subscriberequest>
    resources-subscribe(uri),
    /// Unsubscribe from resource updates
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#unsubscriberequest>
    resources-unsubscribe(uri),
  }

  /// Server requests (sent to client)
  @since(version = 0.4.0)
  variant server-request {
    elicitation-create(elicit-request),
    roots-list(list-roots-request),
    sampling-create-message(sampling-create-message-request),
    ping(ping-request),
  }

  /// MCP request (client or server)
  @since(version = 0.4.0)
  variant mcp-request {
    server(server-request),
    client(client-request),
  }

  /// Server responses (to client requests)
  @since(version = 0.4.0)
  variant server-response {
    initialize(initialize-result),
    tools-list(list-tools-result),
    tools-call(call-tool-result),
    resources-list(list-resources-result),
    resources-read(read-resource-result),
    resources-templates-list(list-resource-templates-result),
    prompts-list(list-prompts-result),
    prompts-get(get-prompt-result),
    completion-complete(complete-result),
  }

  /// Client responses (to server requests)
  @since(version = 0.4.0)
  variant client-response {
    elicitation-create(elicit-result),
    roots-list(list-roots-result),
    sampling-create-message(sampling-create-message-result),
  }

  /// MCP response (client or server)
  @since(version = 0.4.0)
  variant mcp-response {
    server(server-response),
    client(client-response),
  }

  /// =========================================================================
  /// Notification Types
  /// =========================================================================
  /// Logging message notification
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#loggingmessagenotification>
  @since(version = 0.4.0)
  record logging-message-notification {
    /// Log message data
    data: json,
    /// Log level
    level: log-level,
    /// Logger name
    logger: option<string>,
  }

  /// Cancelled notification
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#cancellednotification>
  @since(version = 0.4.0)
  record cancelled-notification {
    /// Request that was cancelled
    request-id: request-id,
    /// Cancellation reason
    reason: option<string>,
  }

  /// Progress notification
  ///
  /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#progressnotification>
  @since(version = 0.4.0)
  record progress-notification {
    /// Progress token from original request
    progress-token: progress-token,
    /// Current progress value
    progress: f64,
    /// Total progress value (for percentage)
    total: option<f64>,
    /// Status message
    message: option<string>,
  }

  /// Common notification fields
  @since(version = 0.4.0)
  record common-notification {
    meta: option<meta>,
    /// Additional notification data
    extras: option<json>,
  }

  /// Server notifications (sent to client)
  @since(version = 0.4.0)
  variant server-notification {
    /// Tools list changed
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#toollistchangednotification>
    tools-list-changed(common-notification),
    /// Resources list changed
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#resourcelistchangednotification>
    resources-list-changed(common-notification),
    /// Prompts list changed
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#promptlistchangednotification>
    prompts-list-changed(common-notification),
    /// Log message
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#loggingmessagenotification>
    logging-message(logging-message-notification),
    /// Request cancelled
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#cancellednotification>
    cancelled(cancelled-notification),
    /// Progress update
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#progressnotification>
    progress(progress-notification),
  }

  /// Client notifications (sent to server)
  @since(version = 0.4.0)
  variant client-notification {
    /// Initialization complete
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#initializednotification>
    initialized(common-notification),
    /// Roots list changed
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#rootslistchangednotification>
    roots-list-changed(common-notification),
    /// Request cancelled
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#cancellednotification>
    cancelled(cancelled-notification),
    /// Progress update
    ///
    /// Spec: <https://spec.modelcontextprotocol.io/specification/2025-06-18/schema#progressnotification>
    progress(progress-notification),
  }

  /// MCP notification (client or server)
  @since(version = 0.4.0)
  variant mcp-notification {
    server(server-notification),
    client(client-notification),
  }

  /// =========================================================================
  /// Error Types
  /// =========================================================================
  /// Error structure
  @since(version = 0.4.0)
  record error {
    /// Request ID this error relates to
    id: option<request-id>,
    /// JSON-RPC error code
    code: s64,
    /// Error message
    message: string,
    /// Additional error data
    data: option<json>,
  }

  /// Standard JSON-RPC error codes
  @since(version = 0.4.0)
  variant error-code {
    /// Parse error (-32700)
    parse-error(error),
    /// Invalid request (-32600)
    invalid-request(error),
    /// Method not found (-32601)
    method-not-found(error),
    /// Invalid parameters (-32602)
    invalid-params(error),
    /// Internal error (-32603)
    internal-error(error),
    /// JSON-RPC server error (-32000 to -32099)
    server(error),
    /// Other JSON-RPC error (-32768 to -32000, excluding above)
    json-rpc(error),
    /// Unspecified MCP error
    mcp(error),
  }

  /// =========================================================================
  /// Context Types
  /// =========================================================================
  /// Client context passed to server handlers
  ///
  /// Contains information about the requesting client for authorization
  /// and personalization.
  @since(version = 0.4.0)
  record client-context {
    /// Client identity claims (authentication)
    identity-claims: option<claims>,
    /// Session ID (if using sessions)
    session-id: option<session-id>,
    /// Output stream for server-initiated messages
    output: option<borrow<output-stream>>,
  }

  /// Server context passed to client handlers
  ///
  /// Contains information about the server connection.
  @since(version = 0.4.0)
  record server-context {
    /// Output stream for client-initiated messages
    output: option<borrow<output-stream>>,
  }
}

/// MCP capability interfaces for focused business logic
///
/// Capability interfaces provide a clean separation between MCP protocol handling
/// and domain-specific business logic. Components implementing these interfaces focus
/// solely on their functionality (tools, prompts, resources) without dealing with:
/// - JSON-RPC protocol details
/// - Request routing and delegation
/// - Response merging across multiple providers
/// - Error code mapping
///
/// Capability components are automatically wrapped by middleware at composition time,
/// which handles all protocol concerns and integrates them into the server-handler pipeline.
///
/// Architecture:
///   Client → Transport → [Middleware(Capability₁)] → [Middleware(Capability₂)] → ... → Response
///
/// <https://spec.modelcontextprotocol.io>
/// Tools capability interface
///
/// Components implementing this interface provide MCP tools without dealing with
/// protocol details. The tools-middleware component automatically:
/// - Wraps this capability as a server-handler
/// - Merges tools from multiple capabilities
/// - Handles unknown tool calls by delegating downstream
/// - Maps errors to appropriate MCP error codes
///
/// This interface focuses on two concerns:
/// 1. Listing the tools this component provides
/// 2. Executing tool calls (returning None for unrecognized tools)
///
/// <https://spec.modelcontextprotocol.io/specification/server/tools>
@since(version = 0.4.0)
interface tools-capability {
  use protocol.{client-context, cursor, list-tools-request, list-tools-result, call-tool-request, call-tool-result};

  /// List all tools provided by this capability
  ///
  /// This function returns the complete catalog of tools this component can execute.
  /// The middleware will automatically merge these tools with tools from other
  /// capability components in the pipeline.
  ///
  /// The request may include pagination parameters (cursor) which should be honored
  /// if the component has a large number of tools.
  ///
  /// <https://spec.modelcontextprotocol.io/specification/server/tools#tools-list>
  @since(version = 0.4.0)
  list-tools: func(request: list-tools-request, client: client-context) -> list-tools-result;

  /// Execute a tool call
  ///
  /// This function is called when a client invokes a tool. The component should:
  /// 1. Check if the tool name matches one of its tools
  /// 2. If yes, execute the tool and return Some(result)
  /// 3. If no, return None to indicate this capability doesn't handle this tool
  ///
  /// Returning None allows the middleware to delegate the call to the next
  /// capability in the pipeline. This enables automatic composition of multiple
  /// tool providers without manual routing logic.
  ///
  /// The middleware handles all error cases:
  /// - Tool not found (when all capabilities return None)
  /// - Invalid arguments (component returns error in result)
  /// - Execution failures (component returns error in result)
  ///
  /// <https://spec.modelcontextprotocol.io/specification/server/tools#tools-call>
  @since(version = 0.4.0)
  call-tool: func(request: call-tool-request, client: client-context) -> option<call-tool-result>;
}

/// Server-side MCP request/response handler interface
///
/// This interface defines the contract for processing MCP protocol messages on the server side.
/// Components implementing this interface receive client requests, process them, and return
/// server responses. They also handle bidirectional communication through responses and notifications.
///
/// Handler components form a linear pipeline where each handler can:
/// - Process requests it understands and return a response
/// - Delegate unknown requests downstream by importing server-handler
/// - Observe responses and notifications flowing back upstream
///
/// <https://spec.modelcontextprotocol.io>
@since(version = 0.4.0)
interface server-handler {
  use protocol.{client-context, error-code, claims, session-id, request-id, server-response, client-request, client-response, client-notification};
  use wasi:io/streams@0.2.3.{output-stream};

  /// Handle an MCP request from the client
  ///
  /// This is the primary entry point for processing client requests. Handlers should:
  /// 1. Check if they can handle this request type
  /// 2. If yes, process it and return a server-response
  /// 3. If no, delegate to downstream by importing and calling server-handler
  ///
  /// The client-context provides session information and identity claims that may be
  /// used for authorization, personalization, or session management.
  ///
  /// <https://spec.modelcontextprotocol.io/specification/basic/requests>
  @since(version = 0.4.0)
  handle-request: func(id: request-id, request: client-request, client: client-context) -> result<server-response, error-code>;

  /// Handle a response from the client to a previous server request
  ///
  /// Servers can send requests to clients (e.g., sampling, root list requests).
  /// When the client responds, this function is called with the response.
  ///
  /// The request-id is optional because notifications don't have IDs.
  /// Handlers should:
  /// 1. Match the response to their pending request using the ID
  /// 2. Resume any suspended operations waiting for this response
  /// 3. Forward unrecognized responses downstream
  ///
  /// <https://spec.modelcontextprotocol.io/specification/client/elicitation>
  @since(version = 0.4.0)
  handle-response: func(id: option<request-id>, response: result<client-response, error-code>);

  /// Handle a notification from the client
  ///
  /// Notifications are one-way messages from client to server that don't expect a response.
  /// Examples include progress updates, cancellation requests, and resource updates.
  ///
  /// Handlers should:
  /// 1. Process notifications relevant to their functionality
  /// 2. Forward all notifications downstream (they're informational)
  ///
  /// <https://spec.modelcontextprotocol.io/specification/basic/notifications>
  @since(version = 0.4.0)
  handle-notification: func(notification: client-notification);
}

/// Client-side MCP request/response handler interface
///
/// This interface defines the contract for processing MCP protocol messages on the client side.
/// Components implementing this interface receive server requests, process them, and return
/// client responses. They also handle bidirectional communication through responses and notifications.
///
/// This mirrors server-handler but processes server-initiated messages.
///
/// <https://spec.modelcontextprotocol.io>
@since(version = 0.4.0)
interface client-handler {
  use protocol.{server-context, error-code, request-id, client-response, server-request, server-response, server-notification};
  use wasi:io/streams@0.2.3.{output-stream};

  /// Handle an MCP request from the server
  ///
  /// This is called when the server sends a request to the client, such as:
  /// - Sampling requests (asking the client to generate completions)
  /// - Root list requests (asking for the client's root URIs)
  ///
  /// <https://spec.modelcontextprotocol.io/specification/basic/requests>
  @since(version = 0.4.0)
  handle-request: func(id: request-id, request: server-request, server: server-context) -> result<client-response, error-code>;

  /// Handle a response from the server to a previous client request
  ///
  /// When the client makes a request and the server responds, this function is called.
  /// Handlers should match responses to their pending requests and resume operations.
  ///
  /// <https://spec.modelcontextprotocol.io/specification/basic/requests>
  @since(version = 0.4.0)
  handle-response: func(id: option<request-id>, response: result<server-response, error-code>);

  /// Handle a notification from the server
  ///
  /// Servers send notifications to inform clients of changes:
  /// - Resource list changes
  /// - Prompt list changes
  /// - Tool list changes
  /// - Progress updates
  /// - Log messages
  ///
  /// <https://spec.modelcontextprotocol.io/specification/basic/notifications>
  @since(version = 0.4.0)
  handle-notification: func(notification: server-notification);
}

/// Bidirectional notification interfaces
///
/// These interfaces provide convenience functions for sending MCP notifications
/// over output streams. Notifications are one-way messages that don't expect responses.
///
/// There are two categories:
/// - **Bidirectional notifications**: Shared by client and server (progress)
/// - **Client notifications**: Server → Client only (logs, list changes, requests)
///
/// <https://spec.modelcontextprotocol.io/specification/basic/notifications>
/// Bidirectional MCP notifications
///
/// Notifications that can be sent by both clients and servers. Currently this
/// includes only progress notifications, which provide real-time updates on
/// long-running operations.
///
/// <https://spec.modelcontextprotocol.io/specification/basic/utilities/progress>
@since(version = 0.4.0)
interface notifications {
  use wasi:io/streams@0.2.3.{output-stream, stream-error};
  use protocol.{progress-token, log-level};

  /// Errors that can occur when sending notifications
  @since(version = 0.4.0)
  variant notification-error {
    /// An I/O error occurred writing to the output stream
    io(stream-error),
    /// Failed to serialize the notification to JSON-RPC format
    serialization(string),
    /// An unexpected error occurred
    unexpected(string),
  }

  /// Send a bidirectional `notifications/progress` notification
  ///
  /// Progress notifications inform the recipient about the status of long-running
  /// operations. They include:
  /// - token: Identifies which operation this progress is for
  /// - progress: Current progress value
  /// - total: Optional total value (for percentage calculation)
  /// - message: Optional human-readable status message
  ///
  /// Progress notifications are advisory - recipients may ignore them without
  /// affecting operation correctness.
  ///
  /// <https://spec.modelcontextprotocol.io/specification/basic/utilities/progress>
  @since(version = 0.4.0)
  progress: func(output: borrow<output-stream>, token: progress-token, progress: f64, total: option<f64>, message: option<string>) -> result<_, notification-error>;
}

/// Client-directed MCP notifications and requests
///
/// These interfaces are used by servers to send notifications and requests to clients.
/// Unlike bidirectional notifications, these are server → client only.
///
/// Categories:
/// - **Logging**: Send log messages to client's logging system
/// - **List changes**: Notify when tools/prompts/resources are added/removed
/// - **Subscriptions**: Push updates to subscribed resources/prompts
/// - **Elicitation**: Request information from the client (roots, sampling)
///
/// <https://spec.modelcontextprotocol.io/specification/server/utilities/logging>
@since(version = 0.4.0)
interface client-notifications {
  use wasi:io/streams@0.2.3.{output-stream};
  use protocol.{server-request, progress-token, log-level, server-lists, server-subscriptions};
  use notifications.{notification-error};

  /// Log a message to the client
  ///
  /// Servers can send log messages to clients for debugging, monitoring, or
  /// informational purposes. The client determines how to display or store
  /// these logs.
  ///
  /// Log levels:
  /// - debug: Detailed diagnostic information
  /// - info: General informational messages
  /// - notice: Normal but significant events
  /// - warning: Warning conditions
  /// - error: Error conditions
  /// - critical: Critical conditions
  /// - alert: Action must be taken immediately
  /// - emergency: System is unusable
  ///
  /// <https://spec.modelcontextprotocol.io/specification/server/utilities/logging>
  @since(version = 0.4.0)
  log: func(output: borrow<output-stream>, message: string, level: log-level, logger: option<string>) -> result<_, notification-error>;

  /// Send a `notifications/*/list_changed` notification to the client
  ///
  /// When the server's list of tools, prompts, or resources changes (additions,
  /// removals, or modifications), this notification informs the client to re-fetch
  /// the affected list(s).
  ///
  /// The server-lists parameter indicates which lists changed. Clients should
  /// call the corresponding list endpoints (tools/list, prompts/list, etc.) to
  /// get the updated lists.
  ///
  /// <https://spec.modelcontextprotocol.io/specification/server/utilities/list_changed>
  @since(version = 0.4.0)
  list-changed: func(output: borrow<output-stream>, changes: server-lists) -> result<_, notification-error>;

  /// Send a `notifications/*/updated` notification to the client
  ///
  /// For resources and prompts that support subscriptions, this notification
  /// pushes updates to clients that have subscribed. The update includes the
  /// new content so clients don't need to re-fetch.
  ///
  /// Only clients that explicitly subscribed to these resources/prompts will
  /// receive the updates.
  ///
  /// <https://spec.modelcontextprotocol.io/specification/server/resources/updated>
  @since(version = 0.4.0)
  updated: func(output: borrow<output-stream>, updates: server-subscriptions) -> result<_, notification-error>;

  /// Send a request to the client on the current SSE response stream
  ///
  /// Servers can request information from clients using the elicitation mechanism.
  /// The request is sent on the HTTP SSE stream, but the client's JSON-RPC response
  /// arrives as a new HTTP POST request.
  ///
  /// To await responses:
  /// 1. Send the request using this function
  /// 2. Use sessions interface to track pending requests
  /// 3. Match incoming HTTP requests to pending elicitations
  ///
  /// Note: Client MCP/JSON-RPC responses arrive as new HTTP requests.
  /// Use sessions to await client responses within a handler instance.
  ///
  /// <https://spec.modelcontextprotocol.io/specification/2025-06-18/client/elicitation>
  @since(version = 0.4.0)
  request: func(output: borrow<output-stream>, request: server-request) -> result<_, notification-error>;
}

/// MCP session management and related features
///
/// This interface provides stateful session management for MCP servers, enabling:
/// - Persistent session data storage using WASI key-value stores
/// - Client elicitation (requesting information from clients)
/// - Session lifecycle management (initialize, terminate, delete)
/// - Async operations with pollable futures
///
/// Sessions are identified by unique IDs and can span multiple HTTP requests,
/// allowing servers to maintain state and context across interactions.
///
/// <https://spec.modelcontextprotocol.io/specification/2025-06-18/session>
@since(version = 0.4.0)
interface sessions {
  use wasi:io/streams@0.2.3.{output-stream, stream-error};
  use wasi:io/poll@0.2.3.{pollable};
  use wasi:keyvalue/store@0.2.0-draft.{bucket, error as store-error};
  use protocol.{elicit-request, elicit-result};

  /// Errors that can occur during session operations
  @since(version = 0.4.0)
  variant session-error {
    /// An I/O error occurred in communication with the client
    io(stream-error),
    /// An error occurred in the underlying key-value store
    store(store-error),
    /// The specified session does not exist
    no-such-session,
    /// An unexpected error occurred
    unexpected(string),
  }

  /// A future representing a pending elicit result
  ///
  /// The elicit result is ready when the pollable indicates readiness.
  /// This enables async/await style operations where handlers can request
  /// information from clients and continue processing when the response arrives.
  @since(version = 0.4.0)
  resource future-elicit-result {
    /// Create a pollable to wait for the elicit result
    ///
    /// The pollable becomes ready when the client responds to the elicitation.
    /// Use WASI poll to wait for readiness before calling elicit-result().
    @since(version = 0.4.0)
    subscribe: func() -> pollable;
    /// Get the elicit result
    ///
    /// Precondition: Only call this after subscribe() indicates readiness.
    /// Calling before the result is ready may trap or return invalid data.
    @since(version = 0.4.0)
    elicit-result: func() -> elicit-result;
  }

  /// A bucket-backed session keyed by the Mcp-Session-Id HTTP header
  ///
  /// Sessions provide persistent storage and client communication primitives.
  /// Each session is backed by a WASI key-value bucket and identified by a
  /// cryptographically unique ID that's passed in the Mcp-Session-Id header.
  ///
  /// Session lifecycle:
  /// 1. initialize() - Create new session with unique ID
  /// 2. open() - Resume existing session by ID
  /// 3. set()/get() - Persist data across requests
  /// 4. elicit() - Request information from client
  /// 5. terminate() - Mark session as ended (keeps data)
  /// 6. delete() - Remove session and all data
  ///
  /// <https://spec.modelcontextprotocol.io/specification/2025-06-18/session>
  @since(version = 0.4.0)
  resource session {
    /// Initialize a new session in the given bucket
    ///
    /// A cryptographically unique session ID is generated automatically.
    /// The caller should extract the ID and return it to the client via
    /// the Mcp-Session-Id response header.
    ///
    /// The bucket is consumed and owned by the session resource.
    @since(version = 0.4.0)
    initialize: static func(bucket: bucket) -> result<session, session-error>;
    /// Open an existing session by ID in the given bucket
    ///
    /// This is called when a client provides an Mcp-Session-Id header
    /// to resume a previous session. Returns an error if the session
    /// ID doesn't exist in the bucket.
    ///
    /// The bucket is consumed and owned by the session resource.
    @since(version = 0.4.0)
    open: static func(bucket: bucket, id: string) -> result<session, session-error>;
    /// Close the session and return the underlying bucket
    ///
    /// This releases the session resource but keeps all data in the bucket.
    /// The returned bucket can be used to create new sessions or passed to
    /// other components.
    @since(version = 0.4.0)
    close: static func(session: session) -> bucket;
    /// Delete the session and all associated data in the bucket
    ///
    /// This permanently removes the session ID and all key-value pairs.
    /// The bucket is returned for reuse. If deletion fails, returns both
    /// the bucket and the error so the caller can recover.
    @since(version = 0.4.0)
    delete: static func(session: session) -> result<bucket, tuple<bucket, session-error>>;
    /// Get the session ID
    ///
    /// This ID should be returned to clients in the Mcp-Session-Id header
    /// so they can resume the session in future requests.
    @since(version = 0.4.0)
    id: func() -> string;
    /// Get a persistent session value by key
    ///
    /// Returns None if the key doesn't exist. Session data persists across
    /// HTTP requests as long as the session exists.
    @since(version = 0.4.0)
    get: func(key: string) -> result<option<list<u8>>, session-error>;
    /// Set a persistent session value by key
    ///
    /// The value is immediately persisted to the underlying key-value store.
    /// Overwriting an existing key replaces the previous value.
    @since(version = 0.4.0)
    set: func(key: string, value: list<u8>) -> result<_, session-error>;
    /// Elicit information from the client
    ///
    /// This sends a request to the client asking for specific information
    /// (roots, sampling, etc.). The result is a future that can be polled
    /// to check when the client responds.
    ///
    /// The request is sent immediately on the provided output stream.
    /// The future should be stored and polled later to retrieve the response.
    ///
    /// <https://spec.modelcontextprotocol.io/specification/2025-06-18/client/elicitation>
    @since(version = 0.4.0)
    elicit: func(client: borrow<output-stream>, elicitation: elicit-request) -> result<future-elicit-result, session-error>;
    /// Idempotently terminate the session, optionally providing a reason
    ///
    /// Termination marks the session as ended but does NOT delete session data.
    /// Clients can detect termination and stop sending requests. Use delete()
    /// to remove all session data.
    ///
    /// This operation is idempotent - calling multiple times has no effect.
    @since(version = 0.4.0)
    terminate: func(reason: option<string>) -> result<_, session-error>;
    /// Check if the session is terminated
    ///
    /// Returns true if terminate() was previously called on this session.
    /// Terminated sessions can still read data but should not accept new operations.
    @since(version = 0.4.0)
    is-terminated: func() -> result<bool, session-error>;
  }
}

/// Server transport component world
///
/// Transport components provide the entry point for MCP servers, handling the
/// underlying communication protocol (HTTP, stdio, etc.) and routing requests
/// to the server-handler pipeline.
///
/// Transport components import server-handler to delegate MCP protocol logic.
@since(version = 0.4.0)
world server-transport {
  import wasi:io/error@0.2.3;
  import wasi:io/poll@0.2.3;
  import wasi:io/streams@0.2.3;
  import protocol;
  import server-handler;
}
/// Server middleware component world
///
/// Middleware components sit between transports and other handlers in the pipeline,
/// providing cross-cutting concerns like:
/// - Wrapping capability components (tools-capability → tools-middleware → server-handler)
/// - Adding instrumentation, logging, or monitoring
/// - Implementing request/response transformation
///
/// Middleware imports server-handler (to call downstream) and exports server-handler
/// (to receive from upstream), forming a linear chain.
@since(version = 0.4.0)
world server-middleware {
  import wasi:io/error@0.2.3;
  import wasi:io/poll@0.2.3;
  import wasi:io/streams@0.2.3;
  import protocol;
  import server-handler;

  export server-handler;
}
/// Client transport component world
///
/// Transport components provide the entry point for MCP clients, handling the
/// underlying communication protocol and routing responses to the client-handler pipeline.
///
/// Transport components import client-handler to delegate MCP protocol logic.
@since(version = 0.4.0)
world client-transport {
  import wasi:io/error@0.2.3;
  import wasi:io/poll@0.2.3;
  import wasi:io/streams@0.2.3;
  import protocol;
  import client-handler;
}
/// Client middleware component world
///
/// Middleware components sit between transports and other handlers in the client pipeline,
/// providing cross-cutting concerns similar to server middleware.
///
/// Middleware imports client-handler (to call downstream) and exports client-handler
/// (to receive from upstream), forming a linear chain.
@since(version = 0.4.0)
world client-middleware {
  import wasi:io/error@0.2.3;
  import wasi:io/poll@0.2.3;
  import wasi:io/streams@0.2.3;
  import protocol;
  import client-handler;

  export client-handler;
}
